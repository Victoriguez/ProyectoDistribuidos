services:
  storage: 
    image: mongo:6.0
    container_name: mongo-storage
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - distribuidos_network

  redis_actual_cache: 
    image: redis:alpine
    container_name: redis_cache_for_pig_results
    ports:
      - "6380:6379" 
    volumes:
      - redis_pig_data:/data 
    healthcheck: 
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - distribuidos_network

  set-vm-max-map-count:
    image: busybox
    container_name: set-vm-max-map-count
    command: ["sysctl", "-w", "vm.max_map_count=262144"]
    privileged: true
    restart: "no"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: elasticsearch_service
    depends_on:
      - set-vm-max-map-count
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ulimits:
      memlock: {soft: -1, hard: -1}
      nofile: {soft: 65536, hard: 65536}
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - distribuidos_network
    healthcheck:
        test: ['CMD-SHELL', 'curl -s -f http://localhost:9200/_cat/health?h=status | grep -q "green\\|yellow"']
        interval: 30s
        timeout: 10s
        retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    container_name: kibana_service
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch_service:9200"]
    depends_on:
      elasticsearch: {condition: service_healthy}
    networks:
      - distribuidos_network

  scraper:
    build: ./scraper
    container_name: scraper 
    depends_on:
      storage: {condition: service_healthy}
    environment: 
      - MONGO_HOST=storage
      - MAX_EVENTS_TO_COLLECT=150 
    networks:
      - distribuidos_network

  mongo_exporter:
    build: 
      context: ./mongo_exporter
    container_name: mongo_exporter_service
    depends_on:
      storage: {condition: service_healthy}
      scraper: {condition: service_completed_successfully}
    environment:
      - MONGO_HOST_EXPORTER=storage
    volumes:
      - ./entrega2/pig_processing/data_input:/exported_data 
    networks:
      - distribuidos_network

  pig_processor:
    build: 
      context: ./entrega2/pig_processing
      dockerfile: Dockerfile.pig 
    container_name: pig_service_container
    volumes:
      - ./entrega2/pig_processing/scripts:/pig_scripts
      - ./entrega2/pig_processing/data_input:/pig_input_data 
      - ./entrega2/pig_processing/data_output:/pig_output_data 
    command: ["pig", "-x", "local", "-f", "/pig_scripts/process_waze_data.pig"]
    networks:
      - distribuidos_network
    depends_on:
      mongo_exporter: {condition: service_completed_successfully}
    # --- AÑADIR ESTA SECCIÓN ---
    environment:
      - PIG_HOME=/opt/pig/pig-0.17.0

  cache_loader:
    build: 
      context: ./cache_loader
    container_name: cache_loader_service
    depends_on:
      pig_processor: {condition: service_completed_successfully}
      redis_actual_cache: {condition: service_healthy}
    environment:
      - REDIS_HOST_LOADER=redis_actual_cache 
    volumes:
      - ./entrega2/pig_processing/data_output:/pig_results_input 
    networks:
      - distribuidos_network

  es_loader: 
    build: 
      context: ./entrega3/es_loader 
    container_name: es_loader_service
    depends_on:
      pig_processor: {condition: service_completed_successfully}
      elasticsearch: {condition: service_healthy}
    environment:
      - ES_HOST=elasticsearch_service
    volumes:
      - ./entrega2/pig_processing/data_output:/pig_results 
    networks:
      - distribuidos_network

volumes:
  mongo_data:
  redis_pig_data:
  elastic_data:

networks:
  distribuidos_network: 
    driver: bridge